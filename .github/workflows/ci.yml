name: C++ CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang]
        build_type: [Release, Debug]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build clang-tidy doxygen graphviz lcov

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja clang-format doxygen graphviz lcov || true

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ninja doxygen.install graphviz.portable -y

      - name: Configure (${{ matrix.compiler }}, ${{ matrix.build_type }})
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DQUANT_ENABLE_CLANG_TIDY=ON

      - name: Build
        run: cmake --build build -j

      - name: Run tests
        run: ctest --test-dir build --output-on-failure | cat

      - name: Coverage (Linux GCC Release)
        if: runner.os == 'Linux' && matrix.compiler == 'gcc' && matrix.build_type == 'Release'
        run: |
          cmake -S . -B build-cov -G Ninja -DCMAKE_BUILD_TYPE=Release -DQUANT_ENABLE_CLANG_TIDY=OFF -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_EXE_LINKER_FLAGS="--coverage"
          cmake --build build-cov -j
          ctest --test-dir build-cov --output-on-failure | cat
          lcov --directory build-cov --capture --output-file coverage.info
          lcov --remove coverage.info '*/external/*' '/usr/*' --output-file coverage.info
          lcov --list coverage.info
        shell: bash

      - name: Configure with Sanitizers (clang, Debug)
        if: matrix.compiler == 'clang' && matrix.build_type == 'Debug'
        run: |
          cmake -S . -B build-sani -G Ninja -DCMAKE_BUILD_TYPE=Debug -DQUANT_ENABLE_SANITIZERS=ON
          cmake --build build-sani -j
          ctest --test-dir build-sani --output-on-failure | cat

      - name: Generate Doxygen Docs
        run: |
          if [ -f Doxyfile ]; then doxygen Doxyfile; fi

      - name: Upload Docs Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: docs/html
